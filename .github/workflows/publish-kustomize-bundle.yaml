name: Publish Kustomize Bundle

on:
  workflow_call:
    inputs:
      bundle-name:
        required: true
        type: string
        description: "The full name of the bundle that should be used, including the repository (e.g. `ghcr.io/datum-cloud/telemetry-services-operator/crds`)"
      bundle-path:
        required: true
        type: string
        description: "The path to the bundle that should be used, relative to the root of the repository (e.g. `config/crds`)"
    outputs:
      tags:
        description: "Generated tags for the bundle"
        value: ${{ jobs.publish-kustomize-bundle.outputs.tags }}
      labels:
        description: "Generated labels for the bundle"
        value: ${{ jobs.publish-kustomize-bundle.outputs.labels }}
      digest:
        description: "Digest of the published bundle"
        value: ${{ jobs.publish-kustomize-bundle.outputs.digest }}

jobs:
  publish-kustomize-bundle:
    permissions:
      id-token: write
      contents: read
      packages: write
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
      digest: ${{ steps.publish.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Flux CLI
        uses: fluxcd/flux2/action@main
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.bundle-name }}
          tags: |
            type=ref,event=pr
            type=ref,event=pr,suffix=-{{commit_date 'YYYYMMDD-HHmmss'}}
            type=ref,event=branch
            type=ref,event=branch,suffix=-{{commit_date 'YYYYMMDD-HHmmss'}}
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}}
            type=sha

      - name: Publish Bundle
        id: publish
        run: |
          DIGEST=""
          while IFS= read -r tag; do
            tag_version="${tag#*:}"
            echo "Publishing bundle to: oci://${tag}"
            RESULT=$(flux push artifact \
              "oci://${tag}" \
              --path="${{ inputs.bundle-path }}" \
              --source="https://github.com/${GITHUB_REPOSITORY}" \
              --revision="${tag_version}@sha1:$(git rev-parse HEAD)" \
              --output=json)

            # Extract digest from the first push (all pushes should have the same digest)
            if [ -z "$DIGEST" ]; then
              DIGEST=$(echo "$RESULT" | jq -r '.digest // empty')
            fi
          done < <(echo "${{ steps.meta.outputs.tags }}")

          echo "digest=${DIGEST}" >> "$GITHUB_OUTPUT"
