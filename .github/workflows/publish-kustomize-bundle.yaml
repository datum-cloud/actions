name: Publish Kustomize Bundle

on:
  workflow_call:
    inputs:
      bundle-name:
        required: true
        type: string
        description: "The full name of the bundle that should be used, including the repository (e.g. `ghcr.io/datum-cloud/telemetry-services-operator/crds`)"
      bundle-path:
        required: true
        type: string
        description: "The path to the bundle that should be used, relative to the root of the repository (e.g. `config/crds`)"
      image-overlays:
        required: false
        type: string
        description: "Comma-separated list of overlay paths where images should be set (e.g. 'config/base,config/apiserver,config/controller-manager')"
        default: ""
      image-name:
        required: false
        type: string
        description: "The image name to set (e.g. 'ghcr.io/datum-cloud/datum-net')"
        default: ""
    outputs:
      tags:
        description: "Generated tags for the bundle"
        value: ${{ jobs.publish-kustomize-bundle.outputs.tags }}
      labels:
        description: "Generated labels for the bundle"
        value: ${{ jobs.publish-kustomize-bundle.outputs.labels }}
      digest:
        description: "Digest of the published bundle"
        value: ${{ jobs.publish-kustomize-bundle.outputs.digest }}

jobs:
  publish-kustomize-bundle:
    permissions:
      id-token: write
      contents: read
      packages: write
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
      digest: ${{ steps.publish.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Flux CLI
        uses: fluxcd/flux2/action@main
      
      - name: Install Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.bundle-name }}
          tags: |
            type=ref,event=pr,prefix=v0.0.0-
            type=ref,event=pr,suffix=-{{commit_date 'YYYYMMDD-HHmmss'}},prefix=v0.0.0-
            type=ref,event=branch,prefix=v0.0.0-
            type=ref,event=branch,suffix=-{{commit_date 'YYYYMMDD-HHmmss'}},prefix=v0.0.0-
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}}
            type=sha,prefix=v0.0.0-

      - name: Set Image Tags in Kustomize Overlays
        if: ${{ inputs.image-overlays != '' && inputs.image-name != '' }}
        run: |
          # Extract the first tag (usually the semver)
          TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1 | cut -d':' -f2)
          
          echo "Will set image tag to: ${TAG}"
          echo "Image name: ${{ inputs.image-name }}"
          
          # Split the comma-separated overlay paths
          IFS=',' read -ra OVERLAYS <<< "${{ inputs.image-overlays }}"
          
          for overlay_path in "${OVERLAYS[@]}"; do
            overlay_path=$(echo "$overlay_path" | xargs)  # Trim whitespace
            
            if [ -f "${overlay_path}/kustomization.yaml" ]; then
              echo "Setting image ${{ inputs.image-name }}:${TAG} in ${overlay_path}"
              cd "${overlay_path}"
              kustomize edit set image "${{ inputs.image-name }}=${{ inputs.image-name }}:${TAG}"
              cat kustomization.yaml
              cd - > /dev/null
            else
              echo "Error: ${overlay_path}/kustomization.yaml not found"
              exit 1
            fi
          done

      - name: Publish Bundle
        id: publish
        run: |
          DIGEST=""
          while IFS= read -r tag; do
            tag_version="${tag#*:}"
            echo "Publishing bundle to: oci://${tag}"
            RESULT=$(flux push artifact \
              "oci://${tag}" \
              --path="${{ inputs.bundle-path }}" \
              --source="https://github.com/${GITHUB_REPOSITORY}" \
              --revision="${tag_version}@sha1:$(git rev-parse HEAD)" \
              --output=json)

            # Extract digest from the first push (all pushes should have the same digest)
            if [ -z "$DIGEST" ]; then
              DIGEST=$(echo "$RESULT" | jq -r '.digest // empty')
            fi
          done < <(echo "${{ steps.meta.outputs.tags }}")

          echo "digest=${DIGEST}" >> "$GITHUB_OUTPUT"